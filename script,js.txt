let map, startMarker, endMarker, routeControl;
let startCoords, endCoords, watchId;
const feedback = document.getElementById('feedback');
const alarmSound = document.getElementById('alarmSound');

document.addEventListener('DOMContentLoaded', () => {
  initMap();
  requestLocationPermission();
  requestNotificationPermission();
});

function showPage(pageId) {
  document.querySelectorAll('.page').forEach(page => {
    page.classList.remove('active');
  });
  document.getElementById(pageId).classList.add('active');
}

function initMap() {
  map = L.map('map').setView([51.505, -0.09], 13);

  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; OpenStreetMap contributors'
  }).addTo(map);
}

async function geocode(location) {
  try {
    const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`);
    const data = await response.json();
    if (data.length === 0) {
      throw new Error('Location not found');
    }
    return [parseFloat(data[0].lat), parseFloat(data[0].lon)];
  } catch (error) {
    console.error('Geocoding error:', error);
    return null;
  }
}

async function setRoute() {
  const startPoint = document.getElementById('startPoint').value;
  const endPoint = document.getElementById('endPoint').value;

  const startCoordsArr = await geocode(startPoint);
  const endCoordsArr = await geocode(endPoint);

  if (startCoordsArr && endCoordsArr) {
    startCoords = { lat: startCoordsArr[0], lng: startCoordsArr[1] };
    endCoords = { lat: endCoordsArr[0], lng: endCoordsArr[1] };

    if (startMarker) map.removeLayer(startMarker);
    if (endMarker) map.removeLayer(endMarker);
    if (routeControl) map.removeControl(routeControl);

    startMarker = L.marker(startCoords).addTo(map).bindPopup('Start Point').openPopup();
    endMarker = L.marker(endCoords).addTo(map).bindPopup('End Point').openPopup();

    routeControl = L.Routing.control({
      waypoints: [
        L.latLng(startCoords),
        L.latLng(endCoords)
      ],
      router: L.Routing.osrmv1({
        serviceUrl: `https://router.project-osrm.org/route/v1`
      }),
      routeWhileDragging: true,
      createMarker: function() { return null; },
      addWaypoints: false,
      showAlternatives: false,
      lineOptions: {
        styles: [{color: 'blue', opacity: 1, weight: 5}]
      },
      altLineOptions: {
        styles: [{color: 'blue', opacity: 0.5, weight: 5}]
      },
      show: false // Hide the itinerary pane
    }).addTo(map);
  } else {
    alert('Could not geocode one or both locations. Please check the inputs.');
  }
}

function requestLocationPermission() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(position => {
      console.log('Location permission granted');
    }, error => {
      console.error('Location permission denied', error);
    });
  } else {
    console.error('Geolocation is not supported by this browser.');
  }
}

function requestNotificationPermission() {
  if ("Notification" in window) {
    if (Notification.permission !== "granted") {
      Notification.requestPermission().then(permission => {
        if (permission === "granted") {
          console.log('Notification permission granted');
        } else {
          console.log('Notification permission denied');
        }
      });
    }
  } else {
    console.error('Notifications are not supported by this browser.');
  }
}

function startTracking() {
  const alarmDistance = document.getElementById('alarmDistance').value;
  if (startCoords && endCoords && alarmDistance) {
    feedback.textContent = 'Tracking started! You will be alerted when you are within ' + alarmDistance + ' meters of your destination.';

    if (Notification.permission !== 'granted') {
      Notification.requestPermission();
    }

    watchId = navigator.geolocation.watchPosition(position => {
      const userLatLng = L.latLng(position.coords.latitude, position.coords.longitude);
      const distance = userLatLng.distanceTo(endCoords);
      feedback.textContent = 'Remaining distance: ' + distance.toFixed(2) + ' meters';

      if (distance <= alarmDistance) {
        alarmSound.play();
        if (Notification.permission === 'granted') {
          new Notification('Travel Smart', { body: 'You are within ' + alarmDistance + ' meters of your destination!' });
        }
      }
    }, err => {
      console.error('Error watching position:', err);
      feedback.textContent = 'Error getting your location. Please make sure location services are enabled.';
    }, {
      enableHighAccuracy: true,
      maximumAge: 0,
      timeout: 5000
    });
  } else {
    alert('Please set both the route and the alarm distance.');
  }
}

function stopTracking() {
  if (watchId) {
    navigator.geolocation.clearWatch(watchId);
    watchId = null;
    feedback.textContent = 'Tracking stopped.';
  }
}